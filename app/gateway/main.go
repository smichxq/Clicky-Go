// Code generated by hertz generator.

package main

import (
	"clicky.website/clicky/gateway/idl"
	"context"
	"time"

	"clicky.website/clicky/gateway/biz/customer_middleware"
	"clicky.website/clicky/gateway/conf"
	"clicky.wesite/clicky/common/mtl"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/middlewares/server/recovery"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/hertz-contrib/cors"
	"github.com/hertz-contrib/gzip"
	"github.com/hertz-contrib/logger/accesslog"
	hertzZerolog "github.com/hertz-contrib/logger/zerolog"
	prometheus "github.com/hertz-contrib/monitor-prometheus"
	hertztracing "github.com/hertz-contrib/obs-opentelemetry/tracing"
	"github.com/hertz-contrib/pprof"
	"github.com/pingcap/log"
	"github.com/rs/zerolog/diode"
	oteltrace "go.opentelemetry.io/otel/trace"
	"go.uber.org/zap/zapcore"
	"gopkg.in/natefinch/lumberjack.v2"
)

var (
	ServiceName      = conf.GetConf().Hertz.Service
	RegisterAddr     = conf.GetConf().Registry.RegistryAddress[0]
	ConsulHealthAddr = conf.GetConf().Hertz.ConsulHealthAddr
	MetricsPort      = conf.GetConf().Hertz.MetricsPort
)

func main() {
	if conf.GetConf() == nil {
		hlog.Fatalf("get config failed")
		panic("get config failed")
	}

	consul, registryInfo := mtl.InitMetric(ServiceName, MetricsPort, RegisterAddr)
	defer consul.Deregister(registryInfo)

	opentelemetry := mtl.InitTracing(ServiceName)
	defer opentelemetry.Shutdown(context.Background())

	// opentelemetry
	tracer, cfg := hertztracing.NewServerTracer(
		hertztracing.WithCustomResponseHandler(func(c context.Context, ctx *app.RequestContext) {
			ctx.Header("click-trace-id", oteltrace.SpanFromContext(c).SpanContext().TraceID().String())
		}),
	)

	address := conf.GetConf().Hertz.Address

	idl.InitSvcMap()
	h := server.New(server.WithHostPorts(address),
		// prometheus
		server.WithTracer(prometheus.NewServerTracer(
			"",
			"",
			prometheus.WithDisableServer(true),
			prometheus.WithRegistry(mtl.Registry),
		)),
		// opentelemetry
		tracer,
	)

	// opentelemetry
	h.Use(hertztracing.ServerMiddleware(cfg))

	registerMiddleware(h)
	h.Use(customer_middleware.LoggerMiddleware())

	register(h)

	h.Spin()
}

func registerMiddleware(h *server.Hertz) {
	// log
	lj := &lumberjack.Logger{
		Filename:   conf.GetConf().Hertz.LogFileName,
		MaxSize:    conf.GetConf().Hertz.LogMaxSize,
		MaxBackups: conf.GetConf().Hertz.LogMaxBackups,
		MaxAge:     conf.GetConf().Hertz.LogMaxAge,
		Compress:   false,
	}
	writer := diode.NewWriter(lj, 1000, time.Second, func(missed int) {
		log.Warn("dropped_logs", zapcore.Field{
			Key:     "dropped_logs",
			Type:    zapcore.Int64Type,
			Integer: int64(missed),
			String:  "logger dropped logs",
		})
	})
	asyncWriter, flushFunc := writer, func() {
		writer.Close()
		_ = lj.Close()
	}

	hlog.SetLogger(hertzZerolog.New(
		hertzZerolog.WithOutput(asyncWriter),    // allows to specify output
		hertzZerolog.WithLevel(conf.LogLevel()), // option with log level
		hertzZerolog.WithTimestamp(),            // option with timestamp
		hertzZerolog.WithCallerSkipFrameCount(5),
	)) // option with caller

	// flush before shutdown
	h.OnShutdown = append(h.OnShutdown, func(ctx context.Context) {
		flushFunc()
	})

	// pprof
	if conf.GetConf().Hertz.EnablePprof {
		pprof.Register(h)
	}

	// gzip
	if conf.GetConf().Hertz.EnableGzip {
		h.Use(gzip.Gzip(gzip.DefaultCompression))
	}

	// access log
	if conf.GetConf().Hertz.EnableAccessLog {
		h.Use(accesslog.New())
	}

	// recovery
	h.Use(recovery.Recovery())

	// cores
	h.Use(cors.Default())
}

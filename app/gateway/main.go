// Code generated by hertz generator.

package main

import (
	"context"
	"time"

	"clicky.website/clicky/gateway/biz/idl"
	"clicky.website/clicky/gateway/conf"
	"github.com/cloudwego/hertz/pkg/app/middlewares/server/recovery"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/hertz-contrib/cors"
	"github.com/hertz-contrib/gzip"
	"github.com/hertz-contrib/logger/accesslog"
	hertzZerolog "github.com/hertz-contrib/logger/zerolog"
	"github.com/hertz-contrib/pprof"
	"github.com/pingcap/log"
	"github.com/rs/zerolog/diode"
	"go.uber.org/zap/zapcore"
	"gopkg.in/natefinch/lumberjack.v2"
)

func main() {
	if conf.GetConf() == nil {
		hlog.Fatalf("get config failed")
		panic("get config failed")
	}

	address := conf.GetConf().Hertz.Address

	idl.InitSvcMap()
	h := server.New(server.WithHostPorts(address))
	registerMiddleware(h)

	register(h)

	h.Spin()
}

func registerMiddleware(h *server.Hertz) {
	lj := &lumberjack.Logger{
		Filename:   conf.GetConf().Hertz.LogFileName,
		MaxSize:    conf.GetConf().Hertz.LogMaxSize,
		MaxBackups: conf.GetConf().Hertz.LogMaxBackups,
		MaxAge:     conf.GetConf().Hertz.LogMaxAge,
		Compress:   false,
	}
	writer := diode.NewWriter(lj, 1000, time.Second, func(missed int) {
		log.Warn("dropped_logs", zapcore.Field{
			Key:     "dropped_logs",
			Type:    zapcore.Int64Type,
			Integer: int64(missed),
			String:  "logger dropped logs",
		})
	})
	asyncWriter, flushFunc := writer, func() {
		writer.Close()
		_ = lj.Close()
	}

	// log
	hlog.SetLogger(hertzZerolog.New(
		hertzZerolog.WithOutput(asyncWriter),   // allows to specify output
		hertzZerolog.WithLevel(hlog.LevelInfo), // option with log level
		hertzZerolog.WithTimestamp(),           // option with timestamp
		hertzZerolog.WithCaller()))             // option with caller

	// flush before shutdown
	h.OnShutdown = append(h.OnShutdown, func(ctx context.Context) {
		flushFunc()
	})

	// pprof
	if conf.GetConf().Hertz.EnablePprof {
		pprof.Register(h)
	}

	// gzip
	if conf.GetConf().Hertz.EnableGzip {
		h.Use(gzip.Gzip(gzip.DefaultCompression))
	}

	// access log
	if conf.GetConf().Hertz.EnableAccessLog {
		h.Use(accesslog.New())
	}

	// recovery
	h.Use(recovery.Recovery())

	// cores
	h.Use(cors.Default())
}

// humanEncoderConfig copy from zap
func humanEncoderConfig() zapcore.EncoderConfig {
	cfg := testEncoderConfig()
	cfg.EncodeTime = zapcore.ISO8601TimeEncoder
	cfg.EncodeLevel = zapcore.CapitalLevelEncoder
	cfg.EncodeDuration = zapcore.StringDurationEncoder
	return cfg
}

func getWriteSyncer(file string) zapcore.WriteSyncer {
	lumberJackLogger := &lumberjack.Logger{
		Filename:   file,
		MaxSize:    10,
		MaxBackups: 50000,
		MaxAge:     1000,
		Compress:   true,
		LocalTime:  true,
	}
	return zapcore.AddSync(lumberJackLogger)
}

// testEncoderConfig encoder config for testing, copy from zap
func testEncoderConfig() zapcore.EncoderConfig {
	return zapcore.EncoderConfig{
		MessageKey:     "msg",
		LevelKey:       "level",
		NameKey:        "name",
		TimeKey:        "ts",
		CallerKey:      "caller",
		FunctionKey:    "func",
		StacktraceKey:  "stacktrace",
		LineEnding:     "\n",
		EncodeTime:     zapcore.EpochTimeEncoder,
		EncodeLevel:    zapcore.LowercaseLevelEncoder,
		EncodeDuration: zapcore.SecondsDurationEncoder,
		EncodeCaller:   zapcore.ShortCallerEncoder,
	}
}

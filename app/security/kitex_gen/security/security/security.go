// Code generated by Kitex v0.9.1. DO NOT EDIT.

package security

import (
	common "clicky.website/clicky/security/kitex_gen/common"
	security "clicky.website/clicky/security/kitex_gen/security"
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Code2Session": kitex.NewMethodInfo(
		code2SessionHandler,
		newSecurityCode2SessionArgs,
		newSecurityCode2SessionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Demo": kitex.NewMethodInfo(
		demoHandler,
		newSecurityDemoArgs,
		newSecurityDemoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	securityServiceInfo                = NewServiceInfo()
	securityServiceInfoForClient       = NewServiceInfoForClient()
	securityServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return securityServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return securityServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return securityServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "security"
	handlerType := (*security.Security)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "security",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func code2SessionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*security.SecurityCode2SessionArgs)
	realResult := result.(*security.SecurityCode2SessionResult)
	success, err := handler.(security.Security).Code2Session(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSecurityCode2SessionArgs() interface{} {
	return security.NewSecurityCode2SessionArgs()
}

func newSecurityCode2SessionResult() interface{} {
	return security.NewSecurityCode2SessionResult()
}

func demoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*security.SecurityDemoArgs)
	realResult := result.(*security.SecurityDemoResult)
	success, err := handler.(security.Security).Demo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSecurityDemoArgs() interface{} {
	return security.NewSecurityDemoArgs()
}

func newSecurityDemoResult() interface{} {
	return security.NewSecurityDemoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Code2Session(ctx context.Context, req *security.Code2SessionReq) (r *security.Code2SessionResp, err error) {
	var _args security.SecurityCode2SessionArgs
	_args.Req = req
	var _result security.SecurityCode2SessionResult
	if err = p.c.Call(ctx, "Code2Session", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Demo(ctx context.Context, req *common.EmptyResp) (r *common.EmptyResp, err error) {
	var _args security.SecurityDemoArgs
	_args.Req = req
	var _result security.SecurityDemoResult
	if err = p.c.Call(ctx, "Demo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
